"""empty message

Revision ID: 3d20bae505be
Revises:
Create Date: 2019-12-29 13:40:32.722543

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence

# revision identifiers, used by Alembic.
revision = "3d20bae505be"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(CreateSequence(Sequence("registry_id_seq")))
    op.create_table(
        "integration_log",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("integrated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("model_name", sa.String(), nullable=False),
        sa.Column("inserts", sa.Integer(), nullable=False),
        sa.Column("updates", sa.Integer(), nullable=False),
        sa.Column("deletes", sa.Integer(), nullable=False),
        sa.Column("updated_by", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "registry",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('registry_id_seq')"),
            nullable=False,
        ),
        sa.Column("pkey", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("upload_key", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("job_start_date", sa.Date(), nullable=True),
        sa.Column("job_end_date", sa.Date(), nullable=True),
        sa.Column("api14", sa.String(length=14), nullable=True),
        sa.Column("state_no", sa.Integer(), nullable=True),
        sa.Column("county_no", sa.Integer(), nullable=True),
        sa.Column("operator", sa.String(), nullable=True),
        sa.Column("well_name", sa.String(), nullable=True),
        sa.Column("lat", sa.Float(), nullable=True),
        sa.Column("lon", sa.Float(), nullable=True),
        sa.Column("proj", sa.String(), nullable=True),
        sa.Column("tvd", sa.Integer(), nullable=True),
        sa.Column("total_base_water_volume", sa.Integer(), nullable=True),
        sa.Column("total_base_non_water_volume", sa.Integer(), nullable=True),
        sa.Column("state", sa.String(), nullable=True),
        sa.Column("county", sa.String(), nullable=True),
        sa.Column("ff_version", sa.String(), nullable=True),
        sa.Column("is_federal_well", sa.Boolean(), nullable=True),
        sa.Column("is_indian_well", sa.Boolean(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("dtmod", sa.String(), nullable=True),
        sa.Column("purpose_key", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("trade_name", sa.String(), nullable=True),
        sa.Column("supplier", sa.String(), nullable=True),
        sa.Column("purpose", sa.String(), nullable=True),
        sa.Column("system_approach", sa.Boolean(), nullable=True),
        sa.Column("is_water", sa.Boolean(), nullable=True),
        sa.Column("purpose_percent_hf_job", sa.Float(), nullable=True),
        sa.Column("purpose_ingredient_msds", sa.Boolean(), nullable=True),
        sa.Column("ingredient_key", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("ingredient_name", sa.String(), nullable=True),
        sa.Column("cas_number", sa.String(), nullable=True),
        sa.Column("percent_high_additive", sa.Float(), nullable=True),
        sa.Column("percent_hf_job", sa.Float(), nullable=True),
        sa.Column("ingredient_comment", sa.String(), nullable=True),
        sa.Column("ingredient_msds", sa.Boolean(), nullable=True),
        sa.Column("ingredient_mass", sa.Integer(), nullable=True),
        sa.Column("claimant_company", sa.String(), nullable=True),
        sa.Column("disclosure_key", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("pkey"),
        sa.UniqueConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("registry")
    op.drop_table("integration_log")
    op.execute(DropSequence(Sequence("registry_id_seq")))
    # ### end Alembic commands ###
